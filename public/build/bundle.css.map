{
  "version": 3,
  "sources": ["Map.svelte"],
  "sourcesContent": ["<script>\n    import Map from \"@arcgis/core/Map\";\n    import MapView from \"@arcgis/core/views/MapView\";\n    import esriConfig from \"@arcgis/core/config\";\n    import FeatureLayer from \"@arcgis/core/layers/FeatureLayer\";\n    import GraphicsLayer from \"@arcgis/core/layers/GraphicsLayer\";\n    import Graphic from \"@arcgis/core/Graphic\";\n    import {solve} from \"@arcgis/core/rest/route\";\n    import RouteParameters from \"@arcgis/core/rest/support/RouteParameters\";\n    import FeatureSet from \"@arcgis/core/rest/support/FeatureSet\";\n    import {fetchServiceDescription} from \"@arcgis/core/rest/networkService\";\n\n    import { addFeatures } from '@esri/arcgis-rest-feature-layer';\n    import Point from \"@arcgis/core/geometry/Point\";\n\n\n\n    import {onMount} from 'svelte';\n   \n\n    esriConfig.apiKey = \"AAPK3ace7928316549b28c33b66ea457e676dbsV_3c1DDacVuVpeGLLORLCTguTWMzszmAq_TwOPq10LjIj__CNgFsd1GDFUUHa\";\n\n    let userPosition = [8.51631, 47.38935];\n    let loading = true;\n\n    const simpleFillUGC = {\n                type: \"simple-fill\",\n                color: [227, 139, 79, 0.8],  // Orange, opacity 80%\n                outline: {\n                    color: [255, 255, 255],\n                    width: 1\n                }\n            };\n    \n    const simpleFillShelters = {\n        type: \"simple-fill\",\n        color: [255, 0, 0, 0.8],  // Red, opacity 80%\n        outline: {\n            color: [255, 255, 255],\n            width: 1\n        }\n    };\n\n    const map = new Map({\n        basemap: \"arcgis-navigation\" //Basemap layer service\n    });\n\n    const flBarrier = new FeatureLayer({\n        portalItem: { // autocasts as esri/portal/PortalItem\n          id: \"ab54728e3c794d588a4ea1720db8d10e\"\n        }\n    });\n\n    const flUGC = new FeatureLayer({\n        portalItem: {\n          id: \"81d73c02a70d4aae83fc7c3ba0f073a7\"\n        },\n        renderer: {\n            type: \"simple\",\n            symbol: simpleFillUGC\n        }\n    });\n\n    const flShelters = new FeatureLayer({\n        portalItem: { \n          id: \"f0f922a956b046ae88fadc8b32e1fb7f\"\n        },\n        renderer: {\n            type: \"simple\",\n            \"symbol\": {\n                \"type\": \"picture-marker\",\n                \"url\": \"http://static.arcgis.com/images/Symbols/NPS/npsPictograph_0231b.png\",\n                \"width\": \"18px\",\n                \"height\": \"18px\"\n            }\n        }\n    });\n\n    const graphicsLayer = new GraphicsLayer();\n    \n    map.add(graphicsLayer);\n    map.add(flBarrier); \n    map.add(flUGC); \n    map.add(flShelters); \n\n\n    async function getSheltersCoords(){\n        const {features} = await flShelters.queryFeatures();\n        return features.map(f=>[f.geometry.longitude,f.geometry.latitude]);\n    }\n\n    function getPosition(){\n        return new Promise(resolve =>{\n            navigator.geolocation.getCurrentPosition(pos =>{\n                resolve([pos.coords.longitude,pos.coords.latitude]);\n            })\n        });\n    }\n    \n    \n\n    const routeUrl = \"https://route-api.arcgis.com/arcgis/rest/services/World/Route/NAServer/Route_World\";\n  \n    onMount(async ()=>{\n        if(window.location.hash == '#gps'){\n            userPosition = await getPosition();\n        }\n        \n\n        const serviceDescription = await fetchServiceDescription(routeUrl);\n        const { supportedTravelModes } = serviceDescription;\n        const travelMode = supportedTravelModes.find((mode) => mode.name === \"Walking Time\");\n\n        const barriers = await flBarrier.queryFeatures();\n        const shelters = await getSheltersCoords();\n\n        loading=false;\n\n        const view = new MapView({\n            container: \"viewDiv\",\n            map: map,\n            center: userPosition, //Longitude, latitude\n            zoom: 14\n        });\n\n        view.on(\"hold\",async (event) => {\n\n            const y1 = event.mapPoint.latitude-0.00005;\n            const y2 = event.mapPoint.latitude+0.00005;\n            const x1 = event.mapPoint.longitude-0.00005;\n            const x2 = event.mapPoint.longitude+0.00005;\n\n            const rings = [[x1,y1],[x2,y1],[x2,y2],[x1,y2],[x1,y1]];\n\n            const result = await addFeatures({\n                url: 'https://services8.arcgis.com/VAHmVwXyn8lMPYKG/arcgis/rest/services/flood_ugc/FeatureServer/0',\n                features: [{\n                    attributes: {\n                        type: 'local flood'\n                    },\n                    geometry: {\n                        \"rings\": [rings],\n                        \"spatialReference\": {\n                            \"wkid\": 4326\n                        }\n                    }\n                }]\n            });\n\n\n            const polygon = {\n                type: \"polygon\",\n                rings: rings\n            };\n\n            \n\n            const polygonGraphic = new Graphic({\n                geometry: polygon,\n                symbol: simpleFillUGC,\n            });\n\n            graphicsLayer.add(polygonGraphic);\n        })\n\n        async function getRoute(from,to,width) {\n            console.log(barriers);\n            const routeParams = new RouteParameters({\n                stops: new FeatureSet({\n                    features: [\n                        new Graphic({\n                        geometry: new Point({\n                            latitude: from[1],\n                            longitude: from[0]\n                        })\n                        }),\n                        new Graphic({\n                        geometry: new Point({\n                            latitude: to[1],\n                            longitude: to[0]\n                        })\n                        })\n                    ]\n                }),\n                polygonBarriers: barriers,\n                travelMode\n            });\n            const data = await solve(routeUrl, routeParams);\n\n            data.routeResults.forEach(function(result) {\n                result.route.symbol = {\n                    type: \"simple-line\",\n                    color: [5, 150, 255],\n                    width: width || 3\n                };\n\n                view.graphics.add(result.route);\n            });\n                \n        }\n\n        async function getRoutesToShelters(from){\n            const closest = shelters.sort((crd1,crd2) =>{\n                return Math.hypot(crd1[0]-from[0],crd1[1]-from[1])-Math.hypot(crd2[0]-from[0],crd2[1]-from[1]);\n            })\n\n            getRoute(from, closest[0], 4);\n            getRoute(from, closest[1], 3);\n            getRoute(from, closest[2], 2);\n        }\n\n\n        getRoutesToShelters(userPosition);\n    });\n</script>\n\n{#if loading}\n<div class=\"loader\">Loading...</div>\n{/if}\n<div id=\"viewDiv\"></div>\n\n\n\n<style>\n    @import \"https://js.arcgis.com/4.21/@arcgis/core/assets/esri/themes/dark/main.css\";\n    #viewDiv{\n        height:100%;\n        width: 100%;\n    }\n\n    .loader,\n    .loader:after {\n    border-radius: 50%;\n    width: 10em;\n    height: 10em;\n    }\n    .loader {\n    position:absolute;\n    top: 50%;\n    margin: 60px auto;\n    font-size: 10px;\n    position: relative;\n    text-indent: -9999em;\n    border-top: 1.1em solid rgba(1, 144, 125, 0.2);\n    border-right: 1.1em solid rgba(1, 144, 125, 0.2);\n    border-bottom: 1.1em solid rgba(1, 144, 125, 0.2);\n    border-left: 1.1em solid #ffffff;\n    -webkit-transform: translateZ(0);\n    -ms-transform: translateZ(0);\n    transform: translateZ(0);\n    -webkit-animation: load8 1.1s infinite linear;\n    animation: load8 1.1s infinite linear;\n    }\n\n    @keyframes load8 {\n    0% {\n        -webkit-transform: rotate(0deg);\n        transform: rotate(0deg);\n    }\n    100% {\n        -webkit-transform: rotate(360deg);\n        transform: rotate(360deg);\n    }\n    }\n\n</style>"],
  "mappings": ";;;AAiOI;AACI;AACA;;AAGJ;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEI;AACA;;;AAGA;AACA;;;",
  "names": []
}
